name: Go CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22.3'

      - name: Install Dependencies
        run: go mod tidy

      - name: Run Lint
        run: go vet ./...

      - name: Run Unit Tests
        run: go test ./...

      - name: Build Application
        run: go build -v ./...

  # Vulnerability scan, but don't stop deployment on issues
  security_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22.3'

      - name: Install Gosec (Go Security Scanner)
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run Gosec Security Scan
        run: |
          gosec ./... > gosec-report.txt || true  
          cat gosec-report.txt
        # continue-on-error: true  # Continue even if issues are found

      - name: Upload Gosec Report (Artifact)
        uses: actions/upload-artifact@v2
        with:
          name: gosec-report
          path: gosec-report.txt

      - name: Install Trivy for Vulnerability Scans
        run: |
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.40.0/trivy_0.40.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.40.0_Linux-64bit.deb

      - name: Run Trivy Vulnerability Scan
        run: trivy fs --exit-code 0 --severity CRITICAL,HIGH,MEDIUM --ignore-unfixed . || true  # Continue on scan failures

  # Deployment Job
  deploy:
    runs-on: ubuntu-latest
    needs: [build, security_scan]
    if: needs.build.result == 'success'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Make Deployment Script Executable
        run: chmod +x ./scripts/create-eb-environment.sh

      - name: Deploy to Elastic Beanstalk
        run: ./scripts/create-eb-environment.sh
        env:
          EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          DB_NAME: ${{ secrets.DB_NAME }}
          VPC_ID: ${{ secrets.VPC_ID }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
          IAM_INSTANCE_PROFILE: ${{ secrets.IAM_INSTANCE_PROFILE }}
          SECURITY_GROUP_NAME: ${{ secrets.SECURITY_GROUP_NAME }}

      - name: Validate Elastic Beanstalk Environment Configuration
        run: |
          aws elasticbeanstalk validate-configuration-settings \
            --application-name "${{ secrets.APP_NAME }}" \
            --environment-name "${{ secrets.EB_ENV_NAME }}" \
            --region "${{ secrets.AWS_REGION }}"
            --option-settings []

      - name: Check Elastic Beanstalk Health
        run: |
          health_status=$(aws elasticbeanstalk describe-environment-health --environment-name "${{ secrets.EB_ENV_NAME }}" --attribute-names All --region "${{ secrets.AWS_REGION }}" --query "HealthStatus" --output text)
          if [ "$health_status" != "Ok" ]; then
            echo "Deployment failed, rolling back..."
            aws elasticbeanstalk abort-environment-update --environment-name "${{ secrets.EB_ENV_NAME }}" --region "${{ secrets.AWS_REGION }}"
            exit 1
          else
            echo "Deployment succeeded!"

      # Enable CloudWatch monitoring and logs
      - name: Enable CloudWatch Logs
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name ${{ secrets.EB_ENV_NAME }} \
            --option-settings Namespace=aws:elasticbeanstalk:cloudwatch:logs,OptionName=StreamLogs,Value=true \
            --region ${{ secrets.AWS_REGION }}

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: needs.deploy.result == 'failure'
    steps:
      - name: Perform Rollback if Deployment Failed
        run: |
          echo "Performing rollback due to deployment failure..."
          aws elasticbeanstalk rebuild-environment --environment-name ${{ secrets.EB_ENV_NAME }} --region ${{ secrets.AWS_REGION }}